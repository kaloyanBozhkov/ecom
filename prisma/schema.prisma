// Rules:
// - model name always singular
// - array property name always plural (1 to many)
// - models and field snake_case, because postgres does not like uppercase (makes everything lowercase)
// - model and field mapping (aliasing), to be avoided, because there is no corresponding field in the db
// - foreign keys, must be `(name of target model)_id` e.g. `user_id` and the object called like the target model e.g. `user`
// - field groups, core fields at the top (id, uuid, etc) then the actual fields A-Z, then the relations/foreign keys, then indexes
// - Prefer prisma (DB) enums where the type is known a priori, instead of the classic integer mapped to a code enum
// - all external ids must be prefixed by `external_` e.g. `external_stripe_id`
// - counts and booleans should have a default value, to avoid nulls (useful for filtering)

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum order_status {
    PENDING
    PAID
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
    REFUNDED
}

model product {
    id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    created_at      DateTime @default(now())
    updated_at      DateTime @updatedAt
    name            String   @db.VarChar(255)
    slug            String   @unique @db.VarChar(255)
    tagline         String   @db.VarChar(255)
    description     String   @db.Text
    price           Float
    original_price  Float?
    currency        String   @default("USD") @db.VarChar(10)
    badge           String?  @db.VarChar(100)
    in_stock        Boolean  @default(true)
    images          Json // Array of ProductImage objects
    features        Json // Array of ProductFeature objects
    specifications  Json // Array of ProductSpec objects
    safety_features String[] // Array of safety feature strings
    certifications  String[] // Array of certification strings

    @@index([slug])
}

model user {
    id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    created_at   DateTime  @default(now())
    updated_at   DateTime? @updatedAt
    deleted_at   DateTime?
    email        String    @unique() @db.VarChar(255)
    name         String    @db.VarChar(100)
    phone_number String?   @db.VarChar(30)
    orders       order[]
}

model order {
    id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    // Stripe checkout details
    checkout_session_id String       @unique
    status              order_status @default(PENDING)

    // Customer details from Stripe
    customer_email String  @db.VarChar(255)
    customer_name  String? @db.VarChar(100)
    customer_phone String? @db.VarChar(30)

    // Billing address
    billing_address_city        String? @db.VarChar(100)
    billing_address_country     String? @db.VarChar(100)
    billing_address_line1       String? @db.VarChar(255)
    billing_address_line2       String? @db.VarChar(255)
    billing_address_postal_code String? @db.VarChar(20)
    billing_address_state       String? @db.VarChar(100)

    // Order details
    total_amount Int // Amount in cents
    currency     String @default("USD") @db.VarChar(10)
    cart_items   Json // Store cart items as JSON

    // Shipping tracking
    tracking_number String?   @db.VarChar(100)
    shipped_at      DateTime?

    // Relations
    user_id String @db.Uuid
    user    user   @relation(fields: [user_id], references: [id])

    @@index([user_id])
    @@index([checkout_session_id])
    @@index([status])
}
